{
  "name": "mysql2",
  "version": "0.15.8",
  "description": "fast mysql driver. Implements core protocol, prepared statements, ssl and compression in native JS",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "node ./test/run.js",
    "benchmark": "./benchmarks/run-unit.js",
    "benchmarks": "./benchmarks/run-unit.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sidorares/node-mysql2"
  },
  "keywords": [
    "mysql",
    "client",
    "server"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "author": {
    "name": "Andrey Sidorov",
    "email": "sidorares@yandex.ru"
  },
  "license": "MIT",
  "dependencies": {
    "bn.js": "2.0.0",
    "cardinal": "0.4.4",
    "double-ended-queue": "2.0.0-0",
    "named-placeholders": "0.1.3",
    "readable-stream": "1.0.33"
  },
  "devDependencies": {
    "progress": "1.1.8",
    "urun": "0.0.8",
    "utest": "0.0.8"
  },
  "readme": "#node-mysql2\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n\nMysql client for node.js. Written in native JavaScript and aims to be mostly api compatible with [node-mysql](https://github.com/felixge/node-mysql)\n\n[![NPM](https://nodei.co/npm/mysql2.png?downloads=true&stars=true)](https://nodei.co/npm/mysql2/)\n[![NPM](https://nodei.co/npm-dl/mysql2.png?months=6)](https://nodei.co/npm/mysql2/)\n\n## Features\n\n In addition to client-side query/escape and connection pooling\n\n  - [fast](https://gist.github.com/sidorares/ffe9ee9c423f763e3b6b)\n  - MySQL server API for proxies and mocks\n  - SSL and compression\n  - prepared statements\n  - binlog protocol client\n\n## Documentation\n\nSee [node-mysql](https://github.com/felixge/node-mysql) documentation. If you see api incompatibilities, please report via github issue.\n\nBelow is a list of extensions not supported by node-mysql:\n\n### Named placeholders\n\nYou can use named placeholders for parameters by setting `namedPlaceholders` config value or query/execute time option. Named placeholders are converted to unnamed `?` on the client (mysql protocol does not support named parameters). If you reference parameter multiple times under the same name it is sent to server multiple times.\n\n```js\n   connection.config.namedPlaceholders = true;\n   connection.execute('select :x + :y as z', { x: 1, y: 2}, function(err, rows) {\n     // statement prepared as \"select ? + ? as z\" and executed with [1,2] values\n     // rows returned: [ { z: 3 } ]\n   });\n\n   connection.execute('select :x + :x as z', { x: 1 }, function(err, rows) {\n     // select ? + ? as z, execute with [1, 1]\n   });\n\n   connection.query('select :x + :x as z', { x: 1 }, function(err, rows) {\n     // query select 1 + 1 as z\n   });\n```\n\n### Prepared statements\n\n#### Automatic creation, cached and re-used by connection\n\nSimilar to `connection.query()`.\n\n```js\nconnection.execute('select 1 + ? + ? as result', [5, 6], function(err, rows) {\n  // rows: [ { result: 12 } ]\n  // internally 'select 1 + ? + ? as result' is prepared first. On subsequent calls cached statement is re-used\n});\n\n// close cached statement for 'select 1 + ? + ? as result'. noop if not in cache\nconnection.unprepare('select 1 + ? + ? as result');\n```\n\n#### Manual prepare / execute\n\n```js\nconnection.prepare('select ? + ? as tests', function(err, statement) {\n   // statement.parameters - array of column definitions, length === number of params, here 2\n   // statement.columns - array of result column definitions. Can be empty if result schema is dynamic / not known\n   // statement.id\n   // statement.query\n\n   statement.execute([1, 2], function(err, rows, columns) {\n    // -> [ { tests: 3 } ]\n   });\n\n   // note that there is no callback here. There is no statement close ack at protocol level.\n   statement.close();\n});\n```\nNote that you should not use statement after connection reset (`changeUser()` or disconnect). Statement scope is connection, you need to prepare statement for each new connection in order to use it.\n\n### Receiving rows as array of columns instead of hash with column name as key:\n\n```js\nvar options = {sql: 'select A,B,C,D from foo', rowsAsArray: true};\nconnection.query(options, function(err, results) {\n  /* results will be an array of arrays like this now:\n  [[\n     'field A value',\n     'field B value',\n     'field C value',\n     'field D value',\n  ], ...]\n  */\n});\n```\n\n### Sending tabular data with 'load infile' and local stream:\n\nIn addition to sending local fs files you can send any stream using `infileStreamFactory` query option. If set, it has to be a function that return a readable stream. It gets file path from query as a parameter.\n\n```js\n// local file\nconnection.query('LOAD DATA LOCAL INFILE \"/tmp/data.csv\" INTO TABLE test FIELDS TERMINATED BY ? (id, title)', onInserted1);\n// local stream\nvar sql = 'LOAD DATA LOCAL INFILE \"mystream\" INTO TABLE test FIELDS TERMINATED BY ? (id, title)';\nconnection.query({\n  sql: sql,\n  infileStreamFactory: function(path) { return getStream(); }\n}, onInserted2);\n```\n\n### Connecting using custom stream:\n\n```js\nvar net        = require('net');\nvar mysql      = require('mysql2');\nvar shape      = require('shaper');\nvar connection = mysql.createConnection({\n   user: 'test',\n   database: 'test',\n   stream: net.connect('/tmp/mysql.sock').pipe(shape(10)) // emulate 10 bytes/sec link\n});\nconnection.query('SELECT 1+1 as test1', console.log);\n```\n`stream` also can be a function. In that case function result has to be duplex stream, and it is used for connection transport. This is required if you connect pool using custom transport as new pooled connection needs new stream. [Example](https://github.com/sidorares/node-mysql2/issues/80) connecting over socks5 proxy:\n\n```js\nvar mysql      = require('mysql2');\nvar SocksConnection = require('socksjs');\nvar pool = mysql.createPool({\n  database: 'test',\n  user: 'foo',\n  password: 'bar'\n  stream: function(cb) {\n    cb(null, new SocksConnection({ host: 'remote.host', port: 3306}, { host: 'localhost', port: 1080 }));\n  }\n });\n```\n\nIn addition to password `createConnection()`, `createPool()` and `changeUser()` accept `passwordSha1` option. This is useful when implementing proxies as plaintext password might be not available.\n\n## Known incompatibilities with node-mysql\n\nIn contrast to node-mysql, `zeroFill` flag is ignored in type conversion.\nYou need to check corresponding field zeroFill flag and convert to string manually if this is of importance to you.\n\nDECIMAL and NEWDECIMAL types always returned as string\n\n## Examples\n\nSimple select:\n\n```js\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({ user: 'test', database: 'test'});\n\nconnection.query('SELECT 1+1 as test1', function(err, rows) {\n  //\n});\n```\n\nPrepared statement and parameters:\n\n```js\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({ user: 'test', database: 'test'});\n\nconnection.execute('SELECT 1+? as test1', [10], function(err, rows) {\n  //\n});\n```\n\nConnecting over encrypted connection:\n\n```js\nvar fs         = require('fs');\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({\n   user: 'test',\n   database: 'test',\n   ssl: {\n     key: fs.readFileSync('./certs/client-key.pem'),\n     cert: fs.readFileSync('./certs/client-cert.pem')\n   }\n});\nconnection.query('SELECT 1+1 as test1', console.log);\n```\n\nYou can use 'Amazon RDS' string as value to ssl property to connect to Amazon RDS mysql over ssl (in that case http://s3.amazonaws.com/rds-downloads/mysql-ssl-ca-cert.pem CA cert is used)\n\n```js\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({\n   user: 'foo',\n   password: 'bar',\n   host: 'db.id.ap-southeast-2.rds.amazonaws.com',\n   ssl: 'Amazon RDS'\n});\n\nconn.query('show status like \\'Ssl_cipher\\'', function(err, res) {\n  console.log(err, res);\n  conn.end();\n});\n```\n\n\nSimple mysql proxy server:\n\n```js\nvar mysql = require('mysql2');\n\nvar server = mysql.createServer();\nserver.listen(3307);\nserver.on('connection', function(conn) {\n  console.log('connection');\n\n  conn.serverHandshake({\n    protocolVersion: 10,\n    serverVersion: 'node.js rocks',\n    connectionId: 1234,\n    statusFlags: 2,\n    characterSet: 8,\n    capabilityFlags: 0xffffff\n  });\n\n  conn.on('field_list', function(table, fields) {\n    console.log('field list:', table, fields);\n    conn.writeEof();\n  });\n\n  var remote = mysql.createConnection({user: 'root', database: 'dbname', host:'server.example.com', password: 'secret'});\n\n  conn.on('query', function(sql) {\n    console.log('proxying query:' + sql);\n    remote.query(sql, function(err) { // overloaded args, either (err, result :object)\n                                      // or (err, rows :array, columns :array)\n      if (Array.isArray(arguments[1])) {\n        // response to a 'select', 'show' or similar\n        var rows = arguments[1], columns = arguments[2];\n        console.log('rows', rows);\n        console.log('columns', columns);\n        conn.writeTextResult(rows, columns);\n      } else {\n        // response to an 'insert', 'update' or 'delete'\n        var result = arguments[1];\n        console.log('result', result);\n        conn.writeOk(result);\n      }\n    });\n  });\n\n  conn.on('end', remote.end.bind(remote));\n});\n```\n## MySQL Server API\n\n### Server\n\n  *  **createServer()** - creates server instance\n  *  **Server.listen**  - listen port / unix socket (same arguments as [net.Server.listen](http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback))\n\nevents:\n\n  *  **connect** - new incoming connection.\n\n### Connection\n\n  *  **serverHandshake({serverVersion, protocolVersion, connectionId, statusFlags, characterSet, capabilityFlags})** - send server handshake initialisation packet, wait handshake response and start listening for commands\n  *  **writeOk({affectedRows: num, insertId: num})** - send [OK packet](http://dev.mysql.com/doc/internals/en/overview.html#packet-OK_Packet) to client\n  *  **writeEof(warnings, statusFlags)** - send EOF packet\n  *  **writeTextResult(rows, fields)** - write query result to client. Rows and fields are in the same format as in `connection.query` callback.\n  *  **writeColumns(fields)** - write fields + EOF packets.\n  *  **writeTextRow(row)**  - write array (not hash!) ov values as result row\n  *  TODO: binary protocol\n\nevents:\n\n   *  **query(sql)** - query from client\n\n\n## License\n\n MIT\n\n## Acknowledgements\n\n  - Internal protocol is written from scratch using my experience with [mysql-native](https://github.com/sidorares/nodejs-mysql-native)\n  - constants, sql parameters interpolation, pool, connection config class taken from [node-mysql](https://github.com/felixge/node-mysql) (I tried to preserve git history)\n  - SSL upgrade code based on @TooTallNate [code](https://gist.github.com/TooTallNate/848444)\n  - Secure connection / compressed connection api flags compatible to [mariasql](https://github.com/mscdex/node-mariasql/) client.\n  - [contributors](https://github.com/sidorares/node-mysql2/graphs/contributors)\n\n## Benchmarks\n  - https://gist.github.com/sidorares/ffe9ee9c423f763e3b6b\n  - `npm run benchmarks`\n  - [node-mysql-benchmarks](https://github.com/mscdex/node-mysql-benchmarks)\n  - try to run example [benchmarks](https://github.com/sidorares/node-mysql2/tree/master/benchmarks) on your system\n\n## Examples using MySQL server API:\n\n  - [Mysql-pg-proxy](https://github.com/sidorares/mysql-pg-proxy)  - mysql to postgres proxy server.\n  - [Mysqlite.js](https://github.com/sidorares/mysqlite.js) - mysql server with JS-only (emscripten compiled) sqlite backend.\n  - [sql-engine](https://github.com/eugeneware/sql-engine) - mysql server with leveldb backend.\n\n## See also:\n\n  - [wire protocol documentation](http://dev.mysql.com/doc/internals/en/client-server-protocol.html)\n  - [node-mysql](https://github.com/felixge/node-mysql) - most popular node.js mysql client library\n  - [node-mariasql](https://github.com/mscdex/node-mariasql/) - bindings to libmariasql. One of the fastest clients\n  - [node-libmysqlclident](https://github.com/Sannis/node-mysql-libmysqlclient) - bindings to libmysqlclient\n  - [go-mysql](https://github.com/siddontang/go-mysql) - Mysql Go client (prepared statements, binlog protocol, server)\n\n## Contributing\n\nFeel free to create pull requests.\nTODO in order of importance:\n\n  - node-mysql api incompatibility fixes\n  - documentation\n  - tests\n  - benchmarks\n  - bug fixes\n  - TODOs in source code\n  - performance improvements\n  - features\n\n[npm-image]: https://img.shields.io/npm/v/mysql2.svg\n[npm-url]: https://npmjs.org/package/mysql2\n[node-version-image]: http://img.shields.io/node/v/mysql2.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/sidorares/node-mysql2/master.svg?label=linux\n[travis-url]: https://travis-ci.org/sidorares/node-mysql2\n[appveyor-image]: https://img.shields.io/appveyor/ci/sidorares/node-mysql2/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/sidorares/node-mysql2\n[downloads-image]: https://img.shields.io/npm/dm/mysql2.svg\n[downloads-url]: https://npmjs.org/package/mysql2\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sidorares/node-mysql2/issues"
  },
  "homepage": "https://github.com/sidorares/node-mysql2",
  "_id": "mysql2@0.15.8",
  "_shasum": "f16650b6f7c5bb568b34511e21bafe36d5a89ef1",
  "_from": "mysql2@",
  "_resolved": "https://registry.npmjs.org/mysql2/-/mysql2-0.15.8.tgz"
}
